name: Deploy Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Upload changed assets to R2 first
  upload-r2-assets:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit to detect changes
          lfs: true # Pull LFS files to ensure we can upload them if needed
      
      - name: Pull LFS files
        run: |
          git lfs pull
          echo "✅ Git LFS files pulled successfully"
        
      - name: Check for asset changes
        id: check-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '^public/(video|images|docs)/' > /dev/null; then
            echo "assets_changed=true" >> $GITHUB_OUTPUT
          else
            echo "assets_changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Verify and upload assets to R2
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "🔍 Verifying R2 assets and uploading missing/changed files..."
          
          # First check if key assets exist in R2
          MISSING_ASSETS=0
          if ! wrangler r2 object get "justevery-assets/video/promo-854w.mp4" --remote --pipe > /dev/null 2>&1; then
            echo "❌ Key asset missing from R2: promo-854w.mp4"
            MISSING_ASSETS=1
          fi
          
          # If assets are missing or changed, upload them
          if [ "$MISSING_ASSETS" -eq 1 ] || [ "${{ steps.check-changes.outputs.assets_changed }}" == "true" ]; then
            echo "📤 Uploading assets to R2..."
            
            # Upload all video files
            for file in public/video/*.{mp4,webm,vtt,srt}; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                echo "Uploading $filename..."
                wrangler r2 object put "justevery-assets/video/$filename" --file="$file" --remote || echo "Failed to upload $filename"
              fi
            done
            
            # Upload images if they exist
            if [ -d "public/images" ]; then
              for file in public/images/*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  echo "Uploading image: $filename..."
                  wrangler r2 object put "justevery-assets/images/$filename" --file="$file" --remote
                fi
              done
            fi
          else
            echo "✅ Assets verified - no upload needed"
          fi
          
          # Final verification
          if wrangler r2 object get "justevery-assets/video/promo-854w.mp4" --remote --pipe > /dev/null 2>&1; then
            echo "✅ R2 assets verified successfully"
          else
            echo "❌ R2 asset verification failed - videos may not be available!"
            exit 1
          fi

  # Deploy Worker
  deploy-worker:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: upload-r2-assets # Wait for R2 uploads to complete
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: false # Skip LFS for worker deployment - videos served from R2
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-cache-${{ hashFiles('**/package-lock.json', '**/package.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-cache-${{ hashFiles('**/package-lock.json', '**/package.json') }}-
            ${{ runner.os }}-nextjs-cache-
            
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
          
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
        
      - name: Update service worker cache version
        run: |
          echo "📝 Updating service worker cache version..."
          TIMESTAMP=$(date +%s)
          sed -i "s/const CACHE_VERSION = '[^']*'/const CACHE_VERSION = 'v${TIMESTAMP}'/" public/sw.js || echo "Failed to update SW version"
          
      - name: Build application
        env:
          NEXT_PUBLIC_R2_PUBLIC_URL: https://assets.justevery.com
          NEXT_PUBLIC_R2_BUCKET_NAME: justevery-assets
        run: |
          echo "🔨 Building application for production..."
          npm run build:cloudflare
        
      - name: Clean up video files from build
        run: |
          echo "🧹 Removing video files from build output..."
          find .open-next/assets -type f \( -name "*.mp4" -o -name "*.webm" -o -name "*.mov" -o -name "*.avi" \) -delete 2>/dev/null || true
          
      - name: Verify build output
        run: |
          if [ ! -f ".open-next/worker.js" ]; then
            echo "❌ Build output not found! The .open-next/worker.js file is missing."
            exit 1
          else
            echo "✅ Build output verified: .open-next/worker.js exists"
            echo "📁 Asset files in .open-next/assets/_next/static/:"
            ls -la .open-next/assets/_next/static/ || true
          fi
          
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          
      - name: Purge Cloudflare Cache
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "🧹 Purging Cloudflare cache..."
          response=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}')
          
          if echo "$response" | grep -q '"success":true'; then
            echo "✅ Cache purged successfully"
          else
            echo "⚠️ Cache purge may have failed:"
            echo "$response"
          fi
        continue-on-error: true
          
      - name: Deploy Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Worker**: justevery" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://justevery.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Assets**: https://assets.justevery.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache**: Purged ✓" >> $GITHUB_STEP_SUMMARY